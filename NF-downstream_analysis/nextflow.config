/*
 * -------------------------------------------------
 *  nf-core/cutandrun Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
// params {

//     // // Input options
//     // input                      = null
//     // public_data_ids            = null
//     // skip_sra_fastq_download    = false

//     // Max resource options
//     max_memory                 = "8.GB"
//     max_cpus                   = 4
//     max_time                   = "24.h"
// }

// Load base.config by default for all pipelines
includeConfig "configs/base.config"

// Load modules.config for DSL2 module specific options
includeConfig "configs/modules.config"

// // Load nf-core custom profiles from different Institutions
// try {
//     includeConfig "${params.custom_config_base}/nfcore_custom.config"
// } catch (Exception e) {
//     System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
// }

profiles {
  crick { includeConfig 'configs/crick.config' }
  local { includeConfig 'configs/local.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ["/bin/bash", "-euo", "pipefail"]

def trace_timestamp = new java.util.Date().format( "yyyy-MM-dd_HH-mm-ss")
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
    fields = "task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,cpus,time,memory,%cpu,peak_rss,peak_vmem,rchar,wchar"
}
dag {
    enabled = true
    file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = "atac_neural_plate_border"
    author          = "Eva"
    homePage        = "https://github.com"
    description     = "Analysis"
    mainScript      = "main.nf"
    nextflowVersion = ""
    version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "time") {
        try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "cpus") {
        try {
        return Math.min( obj, params.max_cpus as int )
        } catch (all) {
        println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
        }
    }
}