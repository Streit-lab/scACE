/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
/////////////////////////////////////////////////////////////
    // DEFAULTS FOR ALL R PROCESSES
    withName: R {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 36.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        container = "evahamrud/sc_multi_omic-archr:latest"
    }
/////////////////////////////////////////////////////////////

    // EDIT GTF
    withName: EDIT_GTF {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/0_EDIT_GTF" },
            mode: 'copy']
    }

    // PREPROCESSING
    withName: PREPROCESS {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/1_PREPROCESS" },
            mode: 'copy']
        cpus = { check_max( 12, 'cpus' ) }
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
    }
    withName: SPLIT_STAGES {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/SPLIT_STAGES" },
            mode: 'copy']
        publishDir = [enabled: false]
    }

    // FILTER DIFFERENT THRESHOLDS
    withName: '.*:QC_NO_FILTER:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter FALSE'
    }
    withName: '.*:QC_LOW:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter TRUE --factor 1.2'
    }
    withName: '.*:QC_MED:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter TRUE --factor 1'
    }
    withName: '.*:QC_HIGH:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter TRUE --factor 0.5'
    }

    ///// FILTER NFRAGS  //////
    withName: FILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/filter" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter TRUE --factor 1'
    }

    ///// STAGES: ITERATIVE FILTERING  //////
    withName: FILTER_CLUSTER_LOOP {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/filter_cluster_loop/" },
            mode: 'copy']
        memory = { check_max( 60.GB, 'memory' ) }
        ext.args = '--clust_res 3.6 --clustree_by 0.45 --verbose TRUE'
    }


    // // ROUND 0: prefiltering
    // withName: CLUSTER_PREFILTER {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/clustering" },
    //         mode: 'copy']
    //     memory = { check_max( 60.GB, 'memory' ) }
    //     ext.args = '--stage_clust_res 3.6 --clustree TRUE --stage_clustree_by 0.45 --verbose TRUE'
    // }
    // withName: GENE_SCORES_PREFILTER {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/gene_scores" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_CALL_PREFILTER {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/peak_calling" },
    //         mode: 'copy']
    //     container = "evahamrud/sc_multi_omic-archr_extra:latest"
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_DIFF_PREFILTER {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/peak_diff" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }

    // // ROUND 1: prefiltering_1
    // withName: FILTER_CLUSTERS_1 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_1/filter_clusters" },
    //         mode: 'copy']
    // }
    // withName: CLUSTER_PREFILTER_1 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_1/clustering" },
    //         mode: 'copy']
    //     memory = { check_max( 60.GB, 'memory' ) }
    //     ext.args = '--stage_clust_res 3.6 --clustree TRUE --stage_clustree_by 0.45 --verbose TRUE'
    // }
    // withName: GENE_SCORES_PREFILTER_1 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_1/gene_scores" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_CALL_PREFILTER_1 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_1/peak_calling" },
    //         mode: 'copy']
    //     container = "evahamrud/sc_multi_omic-archr_extra:latest"
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_DIFF_PREFILTER_1 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_1/peak_diff" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }

    // // ROUND 2: prefiltering_2
    // withName: FILTER_CLUSTERS_2 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_2/filter_clusters" },
    //         mode: 'copy']
    // }
    // withName: CLUSTER_PREFILTER_2 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_2/clustering" },
    //         mode: 'copy']
    //     memory = { check_max( 60.GB, 'memory' ) }
    //     ext.args = '--stage_clust_res 3.6 --clustree TRUE --stage_clustree_by 0.45 --verbose TRUE'
    // }
    // withName: GENE_SCORES_PREFILTER_2 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_2/gene_scores" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_CALL_PREFILTER_2 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_2/peak_calling" },
    //         mode: 'copy']
    //     container = "evahamrud/sc_multi_omic-archr_extra:latest"
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_DIFF_PREFILTER_2 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_2/peak_diff" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }

    // // ROUND 3: prefiltering_3
    // withName: FILTER_CLUSTERS_3 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_3/filter_clusters" },
    //         mode: 'copy']
    // }
    // withName: CLUSTER_PREFILTER_3 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_3/clustering" },
    //         mode: 'copy']
    //     memory = { check_max( 60.GB, 'memory' ) }
    //     ext.args = '--stage_clust_res 3.6 --clustree TRUE --stage_clustree_by 0.45 --verbose TRUE'
    // }
    // withName: GENE_SCORES_PREFILTER_3 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_3/gene_scores" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_CALL_PREFILTER_3 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_3/peak_calling" },
    //         mode: 'copy']
    //     container = "evahamrud/sc_multi_omic-archr_extra:latest"
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }
    // withName: PEAK_DIFF_PREFILTER_3 {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_3/peak_diff" },
    //         mode: 'copy']
    //     memory = { check_max( 100.GB, 'memory' ) }
    // }

    // // ROUND 4: postfiltering
    // withName: FILTER_CLUSTERS_POSTFILTER {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/filter_clusters" },
    //         mode: 'copy']
    // }
    withName: CLUSTER_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/clustering" },
            mode: 'copy']
        memory = { check_max( 60.GB, 'memory' ) }
        ext.args = '--stage_clust_res 0.6 --full_clust_res 1.2 --clustree TRUE --stage_clustree_by 0.1 --full_clustree_by 0.2 --verbose TRUE'
    }
    withName: GENE_SCORES_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/gene_scores" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_CALL_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/peak_calling" },
            mode: 'copy']
        container = "evahamrud/sc_multi_omic-archr_extra:latest"
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_DIFF_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/peak_diff" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }

    // FULLDATA: PROCESS FULL DATA
    withName: FILTER_FULL {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/filtered" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
        publishDir = [enabled: false]
    }

    // ARCHR INTEGRATION WORKFLOW - STAGE BY STAGE + FULL DATA
    withName: UNCON_INTEGRATE {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/1_unconstrained_integration" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //see if setting threads to 5 works for full data
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 6.h, 'time' ) }
    }
    withName: CLUSTER_IDENTIFY {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/2_identify_clusters" },
            mode: 'copy']
    }
    withName: SUBSET_INTEGRATION {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/3_removed_contamination" },
            mode: 'copy']
        ext.args = '--meta_col1 scHelper_cell_type_old --groups1 BI,PGC,meso,endo --verbose TRUE --invert TRUE'
    }
    withName: CLUSTER_INTEGRATION {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/4_reclustered" },
            mode: 'copy']
    }
    withName: CLUSTER_IDENTIFY_FILTERED {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/5_identify_clusters" },
            mode: 'copy']
    }
    
    withName: GENE_SCORES {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/6_gene_scores" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_CALL {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/7_peak_calling" },
            mode: 'copy']
        container = "evahamrud/sc_multi_omic-archr_extra:latest"
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_DIFF {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/peak_diff" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }

    withName: TRANSFER_LABELS {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/transfer_labels" },
            mode: 'copy']
    }
    withName: PEAK_CALL_TL {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/transfer_labels/peak_call" },
            mode: 'copy']
        container = "evahamrud/sc_multi_omic-archr_extra:latest"
        memory = { check_max( 100.GB, 'memory' ) }
        ext.args = '--group_by stage_clusters --verbose TRUE'
    }
    withName: HEATMAP_PEAKS_TL {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/transfer_labels/heatmap_peaks" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
        ext.args = '--group_by stage_clusters --verbose TRUE --matrix PeakMatrix'
    }
    withName: HEATMAP_GEX_TL {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/transfer_labels/heatmap_gex" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
        ext.args = '--group_by stage_clusters --verbose TRUE --matrix GeneScoreMatrix'
    }

    withName: HEATMAP_GEX {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/heatmap_gex" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
        ext.args = '--group_by clusters --verbose TRUE --matrix GeneScoreMatrix'
    }
    withName: HEATMAP_PEAKS {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/heatmap_peaks" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
        ext.args = '--group_by clusters --verbose TRUE --matrix PeakMatrix'
    }

    withName: COMPARE_STAGES {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/compare_stages" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
        ext.args = '--verbose TRUE --matrix GeneScoreMatrix'
    }
    withName: DIFF_PEAKS_STAGES {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/transfer_labels/diff_peaks_stages" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: DIFF_PEAKS_CLUSTERS {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/transfer_labels/diff_peaks_clusters" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: FINDING_ENHANCERS {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/transfer_labels/finding_enhancers" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }

    // // ARCHR PEAK CALLING
    // withName: PEAK_CALL {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_peak_calling/${meta.sample_id}/1_peak_calling" },
    //         mode: 'copy']
    //     container = "evahamrud/sc_multi_omic-archr_extra:latest"
    // }
    // withName: PEAK_DIFF {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_peak_calling/${meta.sample_id}/2_differential_peaks" },
    //         mode: 'copy']
    // }

}
