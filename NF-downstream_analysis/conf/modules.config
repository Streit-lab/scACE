/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
/////////////////////////////////////////////////////////////
    // DEFAULTS FOR ALL R PROCESSES
    withName: R {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 36.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        container = "evahamrud/sc_multi_omic-archr:latest"
    }
/////////////////////////////////////////////////////////////

    // EDIT GTF
    withName: EDIT_GTF {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/edited_gtf" },
            mode: 'copy']
    }

    // ARCHR PROCESSING WORKFLOW - FULL DATA
    withName: PREPROCESS {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/1_ArchR_preprocessing" },
            mode: 'copy']
        cpus = { check_max( 12, 'cpus' ) }
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
    }
    withName: DOUBLETS {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/1.5_ArchR_doublets" },
            mode: 'copy']
    }
    withName: FILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/2_ArchR_filtering" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
    }
    withName: DOUBLETS_FILTERED {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/7_ArchR_doublets" },
            mode: 'copy']
    }

    withName: CLUSTER_PREFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/3_ArchR_clustering_prefiltering" },
            mode: 'copy']
        memory = { check_max( 52.GB, 'memory' ) }
        ext.args = '--full_clust_res 1.2 --clustree TRUE --verbose TRUE'
    }
    withName: CLUSTER_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/5_ArchR_clustering_postfiltering" },
            mode: 'copy']
        memory = { check_max( 52.GB, 'memory' ) }
        ext.args = '--full_clust_res 1.2 --clustree TRUE --verbose TRUE'
    }
    withName: CLUSTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${meta.sample_id}/ArchR_clustering" },
            mode: 'copy']
        memory = { check_max( 52.GB, 'memory' ) }
        ext.args = '--full_clust_res 1.2 --stage_clust_res 0.7 --clustree TRUE --verbose TRUE'
    }

    withName: FILTER_CLUSTERS_1 {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/4_ArchR_filter_clusters_1" },
            mode: 'copy']
    }
    withName: FILTER_CLUSTERS_2 {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/6_ArchR_filter_clusters_2" },
            mode: 'copy']
    }
    
    withName: GENE_SCORES {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${meta.sample_id}/ArchR_gene_scores" },
            mode: 'copy']
    }

    // ARCHR PROCESSING WORKFLOW - STAGE BY STAGE
    withName: SPLIT_STAGES {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/ArchR_split" },
            mode: 'copy']
    }
    // withName: CLUSTER_STAGES {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${meta.sample_id}/ArchR_clustering" },
    //         mode: 'copy']
    //     memory = { check_max( 52.GB, 'memory' ) }
    // }
    // withName: GENE_SCORES_STAGES {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_preprocessing/${meta.sample_id}/ArchR_gene_scores" },
    //         mode: 'copy']
    // }

    // ARCHR INTEGRATION WORKFLOW - STAGE BY STAGE + FULL DATA
    withName: UNCON_INTEGRATE {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/1_unconstrained_integration" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //see if setting threads to 5 works for full data
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 6.h, 'time' ) }
    }
    withName: CLUSTER_IDENTIFY {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/2_identify_clusters" },
            mode: 'copy']
    }
    withName: SUBSET_INTEGRATION {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/3_removed_contamination" },
            mode: 'copy']
        ext.args = '--meta_col1 scHelper_cell_type_old --groups1 BI,PGC,meso,endo --verbose TRUE --invert TRUE'
    }
    withName: CLUSTER_INTEGRATION {
        publishDir = [
            path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/4_reclustered" },
            mode: 'copy']
    }

    // ARCHR PEAK CALLING
    withName: PEAK_CALL {
        publishDir = [
            path: { "${params.outdir}/ArchR_peak_calling/${meta.sample_id}" },
            mode: 'copy']
        container = "evahamrud/sc_multi_omic-archr_extra:latest"
    }

}
