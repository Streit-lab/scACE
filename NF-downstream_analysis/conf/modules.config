/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
/////////////////////////////////////////////////////////////
    // DEFAULTS FOR ALL R PROCESSES
    withName: R {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 36.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        container = "evahamrud/sc_multi_omic-archr:latest"
    }
/////////////////////////////////////////////////////////////

    // EDIT GTF
    withName: EDIT_GTF {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/0_EDIT_GTF" },
            mode: 'copy']
    }

    // PREPROCESSING
    withName: PREPROCESS {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/1_PREPROCESS" },
            mode: 'copy']
        cpus = { check_max( 12, 'cpus' ) }
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
    }
    withName: SPLIT_STAGES {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/SPLIT_STAGES" },
            mode: 'copy']
        publishDir = [enabled: false]
    }

    // FILTER DIFFERENT THRESHOLDS
    withName: '.*:QC_NO_FILTER:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter FALSE'
    }
    withName: '.*:QC_LOW:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter TRUE --factor 1.2'
    }
    withName: '.*:QC_MED:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter TRUE --factor 1'
    }
    withName: '.*:QC_HIGH:FILTER' {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${task.process.tokenize(":")[-1].toLowerCase()}" },
            mode: 'copy']
        cpus = { check_max( 5, 'cpus' ) } //set to number of samples for TSSEnrichment
        memory = { check_max( 120.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
        ext.args = '--filter TRUE --factor 0.5'
    }

    // STAGES: CONFIRM POOR QUALITY CLUSTERS
    withName: CLUSTER_PREFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/clustering" },
            mode: 'copy']
        memory = { check_max( 60.GB, 'memory' ) }
        ext.args = '--stage_clust_res 5 --clustree FALSE --clustree_by 0.2 --verbose TRUE'
    }
    withName: GENE_SCORES_PREFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/gene_scores" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_CALL_PREFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/peak_calling" },
            mode: 'copy']
        container = "evahamrud/sc_multi_omic-archr_extra:latest"
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_DIFF_PREFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering/peak_diff" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }

    // STAGES: FILTERED PROCESSING
    withName: FILTER_CLUSTERS_1 {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_1/filter_clusters" },
            mode: 'copy']
    }
    withName: FILTER_CLUSTERS_2 {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/filter_clusters" },
            mode: 'copy']
    }
    withName: CLUSTER_PREFILTER_1 {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/prefiltering_1/clustering" },
            mode: 'copy']
        memory = { check_max( 60.GB, 'memory' ) }
        ext.args = '--stage_clust_res 1 --clustree FALSE --clustree_by 0.2 --verbose TRUE'
    }

    // STAGES + FULLDATA: CHARACTERISE FILTERED DATA
    withName: CLUSTER_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/clustering" },
            mode: 'copy']
        memory = { check_max( 60.GB, 'memory' ) }
        ext.args = '--stage_clust_res 0.9 --full_clust_res 1.2 --clustree TRUE --clustree_by 0.1 --verbose TRUE'
    }
    withName: GENE_SCORES_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/gene_scores" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_CALL_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/peak_calling" },
            mode: 'copy']
        container = "evahamrud/sc_multi_omic-archr_extra:latest"
        memory = { check_max( 100.GB, 'memory' ) }
    }
    withName: PEAK_DIFF_POSTFILTER {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/peak_diff" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
    }

    // FULLDATA: PROCESS FULL DATA
    withName: FILTER_FULL {
        publishDir = [
            path: { "${params.outdir}/ArchR_preprocessing/${task.process.tokenize(":")[-2]}/${meta.sample_id}/postfiltering/filtered" },
            mode: 'copy']
        memory = { check_max( 100.GB, 'memory' ) }
        publishDir = [enabled: false]
    }

    // // ARCHR INTEGRATION WORKFLOW - STAGE BY STAGE + FULL DATA
    // withName: UNCON_INTEGRATE {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/1_unconstrained_integration" },
    //         mode: 'copy']
    //     cpus = { check_max( 5, 'cpus' ) } //see if setting threads to 5 works for full data
    //     memory = { check_max( 120.GB, 'memory' ) }
    //     time = { check_max( 6.h, 'time' ) }
    // }
    // withName: CLUSTER_IDENTIFY {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/2_identify_clusters" },
    //         mode: 'copy']
    // }
    // withName: SUBSET_INTEGRATION {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/3_removed_contamination" },
    //         mode: 'copy']
    //     ext.args = '--meta_col1 scHelper_cell_type_old --groups1 BI,PGC,meso,endo --verbose TRUE --invert TRUE'
    // }
    // withName: CLUSTER_INTEGRATION {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_integration/${meta.sample_id}/4_reclustered" },
    //         mode: 'copy']
    // }

    // // ARCHR PEAK CALLING
    // withName: PEAK_CALL {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_peak_calling/${meta.sample_id}/1_peak_calling" },
    //         mode: 'copy']
    //     container = "evahamrud/sc_multi_omic-archr_extra:latest"
    // }
    // withName: PEAK_DIFF {
    //     publishDir = [
    //         path: { "${params.outdir}/ArchR_peak_calling/${meta.sample_id}/2_differential_peaks" },
    //         mode: 'copy']
    // }

}
