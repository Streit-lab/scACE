params {
    outdir = "output/"
    publish_dir_mode = "copy"
    enable_conda = false
    singularity_pull_docker_container = false
}

process {
    cpus = 2
    memory = 3.GB
    time = 2.h
}

if ("$PROFILE" == "singularity") {
    singularity.enabled = true
    singularity.autoMounts = true
} else if ("$PROFILE" == "conda") {
    params.enable_conda = true
} else {
    docker.enabled = true
    docker.userEmulation = true
}

// Load test_data.config containing paths to test data
includeConfig 'test_data.config'

// Include the nextflow config in NF-downstream analysis, which defines check_max and loads modules.config
includeConfig '../../NF-downstream_analysis/nextflow.config'

// Local test profile config
includeConfig '../../NF-downstream_analysis/conf/local_test.config'


manifest {
    nextflowVersion = '!>=21.10.3'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}